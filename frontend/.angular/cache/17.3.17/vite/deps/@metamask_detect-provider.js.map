{
  "version": 3,
  "sources": ["../../../../../node_modules/@metamask/detect-provider/dist/index.js"],
  "sourcesContent": ["\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {\n    _validateInputs();\n    let handled = false;\n    return new Promise((resolve) => {\n        if (window.ethereum) {\n            handleEthereum();\n        }\n        else {\n            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });\n            setTimeout(() => {\n                handleEthereum();\n            }, timeout);\n        }\n        function handleEthereum() {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            window.removeEventListener('ethereum#initialized', handleEthereum);\n            const { ethereum } = window;\n            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n                resolve(ethereum);\n            }\n            else {\n                const message = mustBeMetaMask && ethereum\n                    ? 'Non-MetaMask window.ethereum detected.'\n                    : 'Unable to detect window.ethereum.';\n                !silent && console.error('@metamask/detect-provider:', message);\n                resolve(null);\n            }\n        }\n    });\n    function _validateInputs() {\n        if (typeof mustBeMetaMask !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n        }\n        if (typeof silent !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n        }\n        if (typeof timeout !== 'number') {\n            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n        }\n    }\n}\nmodule.exports = detectEthereumProvider;\n"],
  "mappings": ";;;;;AAAA;AAAA;AAiBA,aAAS,uBAAuB,EAAE,iBAAiB,OAAO,SAAS,OAAO,UAAU,IAAM,IAAI,CAAC,GAAG;AAC9F,sBAAgB;AAChB,UAAI,UAAU;AACd,aAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,YAAI,OAAO,UAAU;AACjB,yBAAe;AAAA,QACnB,OACK;AACD,iBAAO,iBAAiB,wBAAwB,gBAAgB,EAAE,MAAM,KAAK,CAAC;AAC9E,qBAAW,MAAM;AACb,2BAAe;AAAA,UACnB,GAAG,OAAO;AAAA,QACd;AACA,iBAAS,iBAAiB;AACtB,cAAI,SAAS;AACT;AAAA,UACJ;AACA,oBAAU;AACV,iBAAO,oBAAoB,wBAAwB,cAAc;AACjE,gBAAM,EAAE,SAAS,IAAI;AACrB,cAAI,aAAa,CAAC,kBAAkB,SAAS,aAAa;AACtD,oBAAQ,QAAQ;AAAA,UACpB,OACK;AACD,kBAAM,UAAU,kBAAkB,WAC5B,2CACA;AACN,aAAC,UAAU,QAAQ,MAAM,8BAA8B,OAAO;AAC9D,oBAAQ,IAAI;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,eAAS,kBAAkB;AACvB,YAAI,OAAO,mBAAmB,WAAW;AACrC,gBAAM,IAAI,MAAM,8EAA8E;AAAA,QAClG;AACA,YAAI,OAAO,WAAW,WAAW;AAC7B,gBAAM,IAAI,MAAM,sEAAsE;AAAA,QAC1F;AACA,YAAI,OAAO,YAAY,UAAU;AAC7B,gBAAM,IAAI,MAAM,sEAAsE;AAAA,QAC1F;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
